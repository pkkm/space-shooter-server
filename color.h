// Generation of distinct colors.

#pragma once
#include <stdint.h>
#include <assert.h>
#include <stdint.h>
#include <stdbool.h>
#include "rnd.h"

typedef struct Color {
	uint8_t red;
	uint8_t green;
	uint8_t blue;
} Color;

bool color_equal(Color a, Color b) {
	return a.red == b.red && a.green == b.green && a.blue == b.blue;
}

// 64 very distinct colors (w.r.t. CIELab Delta2000). Taken from <http://stackoverflow.com/questions/309149/generate-distinctly-different-rgb-colors-in-graphs>.
static const Color COLOR_DISTINCT_TABLE[] = {
	{0x00, 0x00, 0x00}, {0x00, 0xFF, 0x00}, {0x00, 0x00, 0xFF},
	{0xFF, 0x00, 0x00}, {0x01, 0xFF, 0xFE}, {0xFF, 0xA6, 0xFE},
	{0xFF, 0xDB, 0x66}, {0x00, 0x64, 0x01}, {0x01, 0x00, 0x67},
	{0x95, 0x00, 0x3A}, {0x00, 0x7D, 0xB5}, {0xFF, 0x00, 0xF6},
	{0xFF, 0xEE, 0xE8}, {0x77, 0x4D, 0x00}, {0x90, 0xFB, 0x92},
	{0x00, 0x76, 0xFF}, {0xD5, 0xFF, 0x00}, {0xFF, 0x93, 0x7E},
	{0x6A, 0x82, 0x6C}, {0xFF, 0x02, 0x9D}, {0xFE, 0x89, 0x00},
	{0x7A, 0x47, 0x82}, {0x7E, 0x2D, 0xD2}, {0x85, 0xA9, 0x00},
	{0xFF, 0x00, 0x56}, {0xA4, 0x24, 0x00}, {0x00, 0xAE, 0x7E},
	{0x68, 0x3D, 0x3B}, {0xBD, 0xC6, 0xFF}, {0x26, 0x34, 0x00},
	{0xBD, 0xD3, 0x93}, {0x00, 0xB9, 0x17}, {0x9E, 0x00, 0x8E},
	{0x00, 0x15, 0x44}, {0xC2, 0x8C, 0x9F}, {0xFF, 0x74, 0xA3},
	{0x01, 0xD0, 0xFF}, {0x00, 0x47, 0x54}, {0xE5, 0x6F, 0xFE},
	{0x78, 0x82, 0x31}, {0x0E, 0x4C, 0xA1}, {0x91, 0xD0, 0xCB},
	{0xBE, 0x99, 0x70}, {0x96, 0x8A, 0xE8}, {0xBB, 0x88, 0x00},
	{0x43, 0x00, 0x2C}, {0xDE, 0xFF, 0x74}, {0x00, 0xFF, 0xC6},
	{0xFF, 0xE5, 0x02}, {0x62, 0x0E, 0x00}, {0x00, 0x8F, 0x9C},
	{0x98, 0xFF, 0x52}, {0x75, 0x44, 0xB1}, {0xB5, 0x00, 0xFF},
	{0x00, 0xFF, 0x78}, {0xFF, 0x6E, 0x41}, {0x00, 0x5F, 0x39},
	{0x6B, 0x68, 0x82}, {0x5F, 0xAD, 0x4E}, {0xA7, 0x57, 0x40},
	{0xA5, 0xFF, 0xD2}, {0xFF, 0xB1, 0x67}, {0x00, 0x9B, 0xFF},
	{0xE8, 0x5E, 0xBE}};

#define COLOR_ARRAY_LEN(array) (sizeof(array) / sizeof((array)[0]))

Color color_distinct(int index) {
	assert(index >= 0);

	if (index < COLOR_ARRAY_LEN(COLOR_DISTINCT_TABLE)) {
		return COLOR_DISTINCT_TABLE[index];
	} else {
		RndState rnd_state = rnd_state_new(1);
		for (int i = 0; i < index - COLOR_ARRAY_LEN(COLOR_DISTINCT_TABLE); i++)
			rnd_next(&rnd_state);
		uint64_t random = rnd_next(&rnd_state);

		Color result = {random >> 16, random >> 8, random};
		return result;
	}
}
